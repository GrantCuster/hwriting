<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Writing - Grant Custer</title>
    <link>https://writing.grantcuster.com/posts/</link>
    <description>Recent content in Posts on Writing - Grant Custer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 May 2022 09:58:24 +0000</lastBuildDate>
    
	<atom:link href="https://writing.grantcuster.com/posts/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS: end-user styling possibilities</title>
      <link>https://writing.grantcuster.com/posts/2022-05-22-css-as-end/</link>
      <pubDate>Sun, 22 May 2022 09:58:24 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2022-05-22-css-as-end/</guid>
      <description>I&amp;rsquo;m excited about CSS again. After experimenting with making layout-from-scratch apps with WebGL/Three.js in an attempt to avoid the sprawl (and creating my own mini-sprawl in the process) I&amp;rsquo;m rethinking approaches.
I&amp;rsquo;m interested in making applications where users customize with their own CSS. My bet is that if we get the initial primitives right, this could allow users to truly customize and feel at home in their spaces.
Benefits What do you get from letting users directly write CSS in the application:</description>
    </item>
    
    <item>
      <title>Towards more manageable pointer events</title>
      <link>https://writing.grantcuster.com/posts/2021-09-15-towards-more-manageable-pointer-events/</link>
      <pubDate>Wed, 15 Sep 2021 10:11:06 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2021-09-15-towards-more-manageable-pointer-events/</guid>
      <description>Working with mouse and touch events is one of the biggest challenges for me in making interactive web apps. The availability of pointer events helps a lot, but I still pretty quickly end up with a mess of conditionals that are hard to reason about. I&amp;rsquo;m working on some new strategies and abstractions to help with this.
PointerOne, PointerTwo, PointerThree The pointer event API provides events for pointerDown, pointerMove, and pointerUp.</description>
    </item>
    
    <item>
      <title>State of mind: scattered thoughs on Typescript, three.js, and class-based architecture</title>
      <link>https://writing.grantcuster.com/posts/2021-08-26-state-of-mind-scattered-thoughs-on-typescript-three-js-and-class-based-architecture/</link>
      <pubDate>Thu, 26 Aug 2021 14:40:43 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2021-08-26-state-of-mind-scattered-thoughs-on-typescript-three-js-and-class-based-architecture/</guid>
      <description>I&amp;rsquo;m possibly in the midst of revising a bunch of my assumptions about how I like to code projects, so I wanted to write down my current thoughts. I&amp;rsquo;m probably in a honeymoon phase with the new set-up, so it&amp;rsquo;s possible as I work longer I&amp;rsquo;ll run into a bunch of walls and complications and end up re-revising.
Typescript I have been avoiding trying Typescript, but I&amp;rsquo;ve now seen too much work from people working on involved interfaces (mainly Steve Ruiz&amp;rsquo;s work and the Excalidraw project) to justify not at least trying it.</description>
    </item>
    
    <item>
      <title>Computer lab: an idea for an art installation for software development</title>
      <link>https://writing.grantcuster.com/posts/2021-08-10-computer-lab-an-idea-for-an-art-installation-for-software-development/</link>
      <pubDate>Tue, 10 Aug 2021 09:25:43 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2021-08-10-computer-lab-an-idea-for-an-art-installation-for-software-development/</guid>
      <description>The idea Get a storefront, split it into a front half and a back half. Put six computers in each half. The front half is free for anyone to come and use. The catch is that the free-to-use computers only run the software made in the lab by the in-residence developers that work in the back half.
Things to consider What level of abstraction What do you want to be the base of the computers in the front half?</description>
    </item>
    
    <item>
      <title>Screenshot vs artwork: games vs creative tools</title>
      <link>https://writing.grantcuster.com/posts/2021-08-06-screenshot-vs-artwork/</link>
      <pubDate>Fri, 06 Aug 2021 16:45:01 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2021-08-06-screenshot-vs-artwork/</guid>
      <description>I take a lot of inspiration from video games but I want to make creative tools. What&amp;rsquo;s the difference between a game and a creative tool?
One big difference seems to be the end goal: with a creative tool you make something you want to share outside of the tool. You export something, often an image or a text document. In a game, you&amp;rsquo;re normally working within the game world. Often you&amp;rsquo;re completing quests.</description>
    </item>
    
    <item>
      <title>Seams and possibilities: Minecraft</title>
      <link>https://writing.grantcuster.com/posts/2021-08-03-seams-and-possibilities-minecraft/</link>
      <pubDate>Tue, 03 Aug 2021 09:43:29 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2021-08-03-seams-and-possibilities-minecraft/</guid>
      <description>I meant to write about this quote last time but got sidetracked:
 okay, to start, an analogy: long ago, a single person could build the best video game that existed. Adventure didn&amp;rsquo;t require 200 developers and 18 months to get out the door. as technology improved, so did expectations. Adventure was my goal. Today&amp;rsquo;s kids&amp;rsquo; goal is fortnite. —@steveklabnik
 The quote, and the thread it comes from, is about how complexity increases as a technology develops.</description>
    </item>
    
    <item>
      <title>Seams and possibilities: software programming and DIY furniture</title>
      <link>https://writing.grantcuster.com/posts/2021-07-28-seams-and-possibilities/</link>
      <pubDate>Wed, 28 Jul 2021 09:31:35 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2021-07-28-seams-and-possibilities/</guid>
      <description>okay, to start, an analogy: long ago, a sing le person could build the best video game that existed. Adventure didn&amp;rsquo;t require 200 developers and 18 months to get out the door. as technology improved, so did expectations. Adventure was my goal. Today&amp;rsquo;s kids&amp;rsquo; goal is fortnite. —@steveklabnik
 One of the things I keep coming back to is the value of visible seams. The idea that you can look at something and develop a mental model of how it works or how it is made.</description>
    </item>
    
    <item>
      <title>WegGL, 3D projection and mental models</title>
      <link>https://writing.grantcuster.com/posts/2020-11-03-webgl-perspective-projection-and-mental-models/</link>
      <pubDate>Tue, 03 Nov 2020 10:50:29 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-11-03-webgl-perspective-projection-and-mental-models/</guid>
      <description>I&amp;rsquo;m working on recreating some graphics editing programs in WebGL. To be able to zoom in on images, I&amp;rsquo;ve implemented a pretty standard 3D camera with projection and view matrices. I&amp;rsquo;ve found really understanding projection to be difficult. It&amp;rsquo;s one thing to get some cubes placed and rendering in the world, it&amp;rsquo;s another thing to enable mouse interactions, where you have to project and unproject between screen space, view space and world space.</description>
    </item>
    
    <item>
      <title>Screen config: October 2020</title>
      <link>https://writing.grantcuster.com/posts/2020-10-19-screen-config-october-2020/</link>
      <pubDate>Mon, 19 Oct 2020 10:27:45 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-10-19-screen-config-october-2020/</guid>
      <description>My current set-up and some of the thinking behind it.
  A photo of the current set-up.   Equipment Screens:
 1920x1200 monitor 1920x1200 monitor 1920x1080 portable monitor 1920x1080 laptop screen  Computers:
 Intel NUC Razer Blade Stealth  Set-up Vertical monitors I&amp;rsquo;ve put both the desktop monitors in vertical orientation, like an open book (or a huge Surface Duo). I think for doing text-based work on the computer (code or writing) this is the ideal set-up.</description>
    </item>
    
    <item>
      <title>Tri: release notes</title>
      <link>https://writing.grantcuster.com/posts/2020-10-06-tri-release-notes/</link>
      <pubDate>Tue, 06 Oct 2020 11:40:31 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-10-06-tri-release-notes/</guid>
      <description>Tri is an experimental image distorter. You can choose an image to render using a WebGL quad, adjust the texture and position coordinates to create different distortions, and save the result.
Understanding WebGL textures Tri is a direct result of my attempts to understand how texture mapping works in WebGL. I&amp;rsquo;ve used WebGL (by way of Three.js) in several projects, but I&amp;rsquo;ve never felt confident in my understanding of how it worked.</description>
    </item>
    
    <item>
      <title>Tile: release notes</title>
      <link>https://writing.grantcuster.com/posts/2020-09-16-tile-release-notes/</link>
      <pubDate>Mon, 21 Sep 2020 11:53:03 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-09-16-tile-release-notes/</guid>
      <description>Tile is an experimental image editor that lets you layout images using a tiling tree layout. You can move, split, and resize images using keyboard controls.
Motivation 1. Tiling window managers I&amp;rsquo;ve been using the tiling window mananger i3wm for around six months now. For my purposes, tiling windows are a much better and more intuitive experience than the dominant &amp;ldquo;floating windows&amp;rdquo; desktop metaphor. A big part of the motivation for making tile was wanting to dive in and explore how tiling logic works at the code level.</description>
    </item>
    
    <item>
      <title>The benefits of limitations in application launchers</title>
      <link>https://writing.grantcuster.com/posts/2020-09-12-the-benefits-of-limitations-in-application-launchers/</link>
      <pubDate>Sat, 12 Sep 2020 12:09:04 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-09-12-the-benefits-of-limitations-in-application-launchers/</guid>
      <description>In my Linux set-up, I use dmenu as an application launcher. dmenu is basically autocomplete for applications and scripts. In many ways, it&amp;rsquo;s not so different from launching things using Spotlight on a Mac.
  Opening 750words.com with dmenu and a launcher script.   Since I started using it, dmenu has been a convenient way to launch apps. But I&amp;rsquo;ve only recently started to realize some of the interesting things it makes possible.</description>
    </item>
    
    <item>
      <title>Sift: release notes</title>
      <link>https://writing.grantcuster.com/posts/2020-09-01-sift-release-notes/</link>
      <pubDate>Tue, 01 Sep 2020 11:50:28 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-09-01-sift-release-notes/</guid>
      <description>Sift is an experimental image editor that slices an image into layers. You can offset the layers to produce interference patterns and pseudo-3D effects. It uses an additive blending mode and pixel-based light splitting algorithm.
Origins I started planning Sift while standing in the ocean, thinking about waves and how to use a wave effect on the pixels of an image. I&amp;rsquo;ve gotten used to thinking of images as a grid of pixels, and I&amp;rsquo;ve done some experiments using HTML canvas and javascript to move, or even flow, pixels around.</description>
    </item>
    
    <item>
      <title>Fantasy consoles and framing</title>
      <link>https://writing.grantcuster.com/posts/2020-08-20-fantasy-consoles-and-framing/</link>
      <pubDate>Thu, 20 Aug 2020 08:32:35 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-08-20-fantasy-consoles-and-framing/</guid>
      <description>I&amp;rsquo;ve been thinking a lot about Joseph White&amp;rsquo;s talk on his motivations for making the PICO-8 fantasy console. There&amp;rsquo;s so much in the talk that resonates with what I&amp;rsquo;ve been thinking about for Constraint Systems: about how carefully selected constraints change the feel of working, making it feel more focused, and even cozy.
Since viewing the talk I&amp;rsquo;ve been thinking a lot about how he frames PICO-8 with the idea of a fantasy console and cartridges, and what I could do for framing Constraint Systems.</description>
    </item>
    
    <item>
      <title>Automadraw: release notes</title>
      <link>https://writing.grantcuster.com/posts/2020-07-30-automadraw/</link>
      <pubDate>Thu, 30 Jul 2020 10:34:10 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-30-automadraw/</guid>
      <description>Automadraw is a new experimental app I made for my Constraint Systems project. It lets you draw and evolve your drawing using cellular automata using two keyboard controlled cursors.
What is it for I think there are two main uses for Automadraw:
 Get more familiar with the cellular automata (Conway&amp;rsquo;s Game of Life and Langton&amp;rsquo;s Ant) that it runs. You can quickly experiment with lots of different patterns.</description>
    </item>
    
    <item>
      <title>Bushido Blade 2: a design appreciation</title>
      <link>https://writing.grantcuster.com/posts/2020-07-28-bushido-blade-2-a-design-appreciation/</link>
      <pubDate>Tue, 28 Jul 2020 16:21:02 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-28-bushido-blade-2-a-design-appreciation/</guid>
      <description>Bushido Blade 2 was a Playstation game I played a lot in high school. It was a fighting game with swords, and its main hook was that instead of health bars, damage was based on where you struck your opponent. You could injure limbs or finish the an opponent with one strike if you hit the right spot.
Design-wise, Bushido Blade rethought the premise of a fighting game from first principles.</description>
    </item>
    
    <item>
      <title>Swapping color schemes across all terminals and Vim with Pywal and Base16</title>
      <link>https://writing.grantcuster.com/posts/2020-07-12-swapping-color-schemes-across-all-terminals-and-vim-with-pywal-and-base16/</link>
      <pubDate>Sun, 12 Jul 2020 12:12:51 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-12-swapping-color-schemes-across-all-terminals-and-vim-with-pywal-and-base16/</guid>
      <description>Switching between light and dark colorschemes in all terminals using a hotkey.   I recently got instant light and dark color scheme toggle working for all open terminals, including those running Vim. I used a combination of techniques from Pywal and Base16 shell, and learned some things about scripting in Linux and escape sequences along the way.
Pywal Pywal is a package for switching color schemes system wide.</description>
    </item>
    
    <item>
      <title>Vimlike</title>
      <link>https://writing.grantcuster.com/posts/2020-06-25-vimlike/</link>
      <pubDate>Thu, 25 Jun 2020 10:18:20 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-06-25-vimlike/</guid>
      <description>This thread, by Zach Gage, on how genre conventions serve as interaction shortcuts, got me thinking about how I use Vim conventions in my creative tools at Constraint Systems.
https://twitter.com/helvetica/status/1274450330726645762:
 7/ A big part of making games involves working with genre literacy. In game design a key concept is the idea of weight: Every rule you add has a cognitive load on the player, and you must balance the weight of your rules against how meaningful they are to the play experience.</description>
    </item>
    
  </channel>
</rss>