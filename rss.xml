<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writing - Grant Custer</title>
    <link>https://writing.grantcuster.com/</link>
    <description>Recent content on Writing - Grant Custer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Sep 2020 11:53:03 +0000</lastBuildDate>
    
	<atom:link href="https://writing.grantcuster.com/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tile: release notes</title>
      <link>https://writing.grantcuster.com/posts/2020-09-16-tile-release-notes/</link>
      <pubDate>Mon, 21 Sep 2020 11:53:03 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-09-16-tile-release-notes/</guid>
      <description>Tile is an experimental image editor that lets you layout images using a tiling tree layout. You can move, split, and resize images using keyboard controls.
Motivation 1. Tiling window managers I&amp;rsquo;ve been using the tiling window mananger i3wm for around six months now. For my purposes, tiling windows are a much better and more intuitive experience than the dominant &amp;ldquo;floating windows&amp;rdquo; desktop metaphor. A big part of the motivation for making tile was wanting to dive in and explore how tiling logic works at the code level.</description>
    </item>
    
    <item>
      <title>The benefits of limitations in application launchers</title>
      <link>https://writing.grantcuster.com/posts/2020-09-12-the-benefits-of-limitations-in-application-launchers/</link>
      <pubDate>Sat, 12 Sep 2020 12:09:04 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-09-12-the-benefits-of-limitations-in-application-launchers/</guid>
      <description>In my Linux set-up, I use dmenu as an application launcher. dmenu is basically autocomplete for applications and scripts. In many ways, it&amp;rsquo;s not so different from launching things using Spotlight on a Mac.
  Opening 750words.com with dmenu and a launcher script.   Since I started using it, dmenu has been a convenient way to launch apps. But I&amp;rsquo;ve only recently started to realize some of the interesting things it makes possible.</description>
    </item>
    
    <item>
      <title>Sift: release notes</title>
      <link>https://writing.grantcuster.com/posts/2020-09-01-sift-release-notes/</link>
      <pubDate>Tue, 01 Sep 2020 11:50:28 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-09-01-sift-release-notes/</guid>
      <description>Sift is an experimental image editor that slices an image into layers. You can offset the layers to produce interference patterns and pseudo-3D effects. It uses an additive blending mode and pixel-based light splitting algorithm.
Origins I started planning Sift while standing in the ocean, thinking about waves and how to use a wave effect on the pixels of an image. I&amp;rsquo;ve gotten used to thinking of images as a grid of pixels, and I&amp;rsquo;ve done some experiments using HTML canvas and javascript to move, or even flow, pixels around.</description>
    </item>
    
    <item>
      <title>Fantasy consoles and framing</title>
      <link>https://writing.grantcuster.com/posts/2020-08-20-fantasy-consoles-and-framing/</link>
      <pubDate>Thu, 20 Aug 2020 08:32:35 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-08-20-fantasy-consoles-and-framing/</guid>
      <description>I&amp;rsquo;ve been thinking a lot about Joseph White&amp;rsquo;s talk on his motivations for making the PICO-8 fantasy console. There&amp;rsquo;s so much in the talk that resonates with what I&amp;rsquo;ve been thinking about for Constraint Systems: about how carefully selected constraints change the feel of working, making it feel more focused, and even cozy.
Since viewing the talk I&amp;rsquo;ve been thinking a lot about how he frames PICO-8 with the idea of a fantasy console and cartridges, and what I could do for framing Constraint Systems.</description>
    </item>
    
    <item>
      <title>Automadraw: release notes</title>
      <link>https://writing.grantcuster.com/posts/2020-07-30-automadraw/</link>
      <pubDate>Thu, 30 Jul 2020 10:34:10 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-30-automadraw/</guid>
      <description>Automadraw is a new experimental app I made for my Constraint Systems project. It lets you draw and evolve your drawing using cellular automata using two keyboard controlled cursors.
What is it for I think there are two main uses for Automadraw:
 Get more familiar with the cellular automata (Conway&amp;rsquo;s Game of Life and Langton&amp;rsquo;s Ant) that it runs. You can quickly experiment with lots of different patterns.</description>
    </item>
    
    <item>
      <title>Bushido Blade 2: a design appreciation</title>
      <link>https://writing.grantcuster.com/posts/2020-07-28-bushido-blade-2-a-design-appreciation/</link>
      <pubDate>Tue, 28 Jul 2020 16:21:02 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-28-bushido-blade-2-a-design-appreciation/</guid>
      <description>Bushido Blade 2 was a Playstation game I played a lot in high school. It was a fighting game with swords, and its main hook was that instead of health bars, damage was based on where you struck your opponent. You could injure limbs or finish the an opponent with one strike if you hit the right spot.
Design-wise, Bushido Blade rethought the premise of a fighting game from first principles.</description>
    </item>
    
    <item>
      <title>Swapping color schemes across all terminals and Vim with Pywal and Base16</title>
      <link>https://writing.grantcuster.com/posts/2020-07-12-swapping-color-schemes-across-all-terminals-and-vim-with-pywal-and-base16/</link>
      <pubDate>Sun, 12 Jul 2020 12:12:51 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-12-swapping-color-schemes-across-all-terminals-and-vim-with-pywal-and-base16/</guid>
      <description>Switching between light and dark colorschemes in all terminals using a hotkey.   I recently got instant light and dark color scheme toggle working for all open terminals, including those running Vim. I used a combination of techniques from Pywal and Base16 shell, and learned some things about scripting in Linux and escape sequences along the way.
Pywal Pywal is a package for switching color schemes system wide.</description>
    </item>
    
    <item>
      <title>Vimlike</title>
      <link>https://writing.grantcuster.com/posts/2020-06-25-vimlike/</link>
      <pubDate>Thu, 25 Jun 2020 10:18:20 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-06-25-vimlike/</guid>
      <description>This thread, by Zach Gage, on how genre conventions serve as interaction shortcuts, got me thinking about how I use Vim conventions in my creative tools at Constraint Systems.
https://twitter.com/helvetica/status/1274450330726645762:
 7/ A big part of making games involves working with genre literacy. In game design a key concept is the idea of weight: Every rule you add has a cognitive load on the player, and you must balance the weight of your rules against how meaningful they are to the play experience.</description>
    </item>
    
  </channel>
</rss>