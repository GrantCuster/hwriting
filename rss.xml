<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writing - Grant Custer</title>
    <link>https://writing.grantcuster.com/</link>
    <description>Recent content on Writing - Grant Custer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jul 2020 10:34:10 +0000</lastBuildDate>
    
	<atom:link href="https://writing.grantcuster.com/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automadraw: release notes</title>
      <link>https://writing.grantcuster.com/posts/2020-07-30-automadraw/</link>
      <pubDate>Thu, 30 Jul 2020 10:34:10 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-30-automadraw/</guid>
      <description>Automadraw is a new experimental app I made for my Constraint Systems project. It lets you draw and evolve your drawing using cellular automata using two keyboard controlled cursors.
What is it for I think there are two main uses for Automadraw:
 Get more familiar with the cellular automata (Conway&amp;rsquo;s Game of Life and Langton&amp;rsquo;s Ant) that it runs. You can quickly experiment with lots of different patterns.</description>
    </item>
    
    <item>
      <title>Bushido Blade 2: a design appreciation</title>
      <link>https://writing.grantcuster.com/posts/2020-07-28-bushido-blade-2-a-design-appreciation/</link>
      <pubDate>Tue, 28 Jul 2020 16:21:02 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-28-bushido-blade-2-a-design-appreciation/</guid>
      <description>Bushido Blade 2 was a Playstation game I played a lot in high school. It was a fighting game with swords, and its main hook was that instead of health bars, damage was based on where you struck your opponent. You could injure limbs or finish the an opponent with one strike if you hit the right spot.
Design-wise, Bushido Blade rethought the premise of a fighting game from first principles.</description>
    </item>
    
    <item>
      <title>Swapping color schemes across all terminals and Vim with Pywal and Base16</title>
      <link>https://writing.grantcuster.com/posts/2020-07-12-swapping-color-schemes-across-all-terminals-and-vim-with-pywal-and-base16/</link>
      <pubDate>Sun, 12 Jul 2020 12:12:51 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-07-12-swapping-color-schemes-across-all-terminals-and-vim-with-pywal-and-base16/</guid>
      <description>Switching between light and dark colorschemes in all terminals using a hotkey.   I recently got instant light and dark color scheme toggle working for all open terminals, including those running Vim. I used a combination of techniques from Pywal and Base16 shell, and learned some things about scripting in Linux and escape sequences along the way.
Pywal Pywal is a package for switching color schemes system wide.</description>
    </item>
    
    <item>
      <title>Vimlike</title>
      <link>https://writing.grantcuster.com/posts/2020-06-25-vimlike/</link>
      <pubDate>Thu, 25 Jun 2020 10:18:20 +0000</pubDate>
      
      <guid>https://writing.grantcuster.com/posts/2020-06-25-vimlike/</guid>
      <description>This thread, by Zach Gage, on how genre conventions serve as interaction shortcuts, got me thinking about how I use Vim conventions in my creative tools at Constraint Systems.
https://twitter.com/helvetica/status/1274450330726645762:
 7/ A big part of making games involves working with genre literacy. In game design a key concept is the idea of weight: Every rule you add has a cognitive load on the player, and you must balance the weight of your rules against how meaningful they are to the play experience.</description>
    </item>
    
  </channel>
</rss>